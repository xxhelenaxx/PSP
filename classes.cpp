#include <iostream>
#include <cstring>
using namespace std;

// Класа е кориснички дефиниран тип податоци (user-defined data type) слично како структурата (struct) само класите овозможуваат и заштита на податоците преку private, public и protected спесификатори.
// Класата опишува какви атрибути (член-променливи) и методи (функции) има еден објект од тој тип.
// Атрибути се податоците кои го опишуваат објектот (пример: бренд, модел, цена).
// Методи се функциите кои ги извршува објектот (пример: печатење на информации).
// Објект е конкретен пример на класата.
// Ако класата е телефон, објектот е конкретен модел.
// Пример: класа Phone ја опишува структурата, а iPhone и Samsung се конкретни објекти.


class Phone { //вака се креира класа
private: //до овој спесификатор има пристап само самата класа, значи не може никоја друга класа, функција или било што надвор од класата да пристапи до компонентите на овој спесификатор
    // Атрибути - приватни член-променливи кои се достапни само во класата
    char* model; //користиме покажувачи бидејќи ќе користиме динамичка алокација и да се избегне копирање
    char* brand;
    double price;

public:
    // Конструктор - се вика при креирање на објект и ги иницијализира атрибутите
    Phone(const char* m, const char* b, double p) { //користиме конст бидејќи не се прават никакви измени на овие параметри
        // Динамичка алокација и копирање на стрингови за model и brand
     // Динамичката алокација ни овозможува поголема флексибилност и управување со меморијата при извршување која се креира и брише според нашата потреба
        model = new char[strlen(m) + 1]; //се креира нов простор на меморија со должина на низата на знаци внесена во аргументот од корисникот +1 за nullptr
        strcpy(model, m); //се копира содржината од внесената низа и се вметнува во низата на објектот

        brand = new char[strlen(b) + 1];
        strcpy(brand, b);

        price = p; // поставување на цената

    }

    // Copy constructor е специјален конструктор во C++ кој се користи за да креира нов објект како копија од веќе постоечки објект.
    Phone(const Phone& other) { //користиме референца и конст бидејќи не се прават никакви измени на внесениот објект и сакаме да работиме со оригиналот и да избегнеме копирање
        model = new char[strlen(other.model) + 1];
        strcpy(model, other.model);

        brand = new char[strlen(other.brand) + 1];
        strcpy(brand, other.brand);

        price = other.price;

    }

    // Деструктор, како што конструкторот иницијалзира креира, деструкторот ослободува (уништува) и е особено важен кога користиме динамички алоцирана меморија
    ~Phone() {
        delete[] model; //исто како new што резевира нов мемориски простор, delete го брише резервираниот мемориски простор
        delete[] brand;
    }

    // Метод - функција која припаѓа на класата и ја користат објектите
    // Овој метод печати информации за телефонот
    void printInfo() const { //const бидејќи овој метод не прави никакви измени
        cout << "Brand: " << brand << ", Model: " << model << ", Price: $" << price << endl;
    }
};

int main() {
    // Креирање на објекти (инстанци) од класата Phone
    Phone iPhone("iPhone 13", "Apple", 999.99);
    Phone samsung("Galaxy S21", "Samsung", 799.99);

    // Печатење информации за објектите
    iPhone.printInfo();
    samsung.printInfo();

    return 0;
}
